name: Resource Convert

on:
  issues:
    types: [labeled]

permissions:
  issues: write
  contents: read

jobs:
  convert-resource-pack:
    if: github.event.label.name == 'build'
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download attachment
        id: download
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const fs = require('fs');
              const path = require('path');
              const { execSync } = require('child_process');
              
              const issueBody = context.payload.issue.body || '';
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const textToSearch = [issueBody];
              for (const comment of comments.data) {
                textToSearch.push(comment.body);
              }
              
              let attachmentUrl = null;
              let fileName = null;
              
              for (const text of textToSearch) {
                const regex = /https:\/\/github\.com\/[^\/\s]+\/(?:files|user-attachments\/files)\/[^\/\s]+\/[^\/\s]+\.zip/gi;
                const matches = text.match(regex);
                
                if (matches && matches.length > 0) {
                  attachmentUrl = matches[0];
                  fileName = path.basename(attachmentUrl);
                  break;
                }
                
                const mdLinkRegex = /\[.*?\]\((https:\/\/github\.com\/[^\/\s]+\/(?:files|user-attachments\/files)\/[^\/\s]+\/[^\/\s]+\.zip)\)/gi;
                let mdMatch;
                
                while ((mdMatch = mdLinkRegex.exec(text)) !== null) {
                  attachmentUrl = mdMatch[1];
                  fileName = path.basename(attachmentUrl);
                  break;
                }
                
                if (attachmentUrl) break;
              }
              
              if (!attachmentUrl) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: '🚫 **エラー**: ZIP ファイル形式のリソースパックが見つかりませんでした。\n\nIssue本文またはコメントにZIPファイルのURLを記載してください。'
                });
                core.setFailed('ZIPファイルが見つかりませんでした');
                return;
              }
              
              const downloadPath = path.join(process.env.GITHUB_WORKSPACE, fileName);
              execSync(`curl -L "${attachmentUrl}" -o "${downloadPath}"`);
              
              core.setOutput('file_path', downloadPath);
              core.setOutput('file_name', fileName);
              core.setOutput('download_success', 'true');
              return { file_path: downloadPath, file_name: fileName };
            } catch (error) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🚫 **ダウンロードエラー**: ${error.message}`
              });
              throw error;
            }

      - name: Notify file detection
        if: steps.download.outputs.download_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fileName = '${{ steps.download.outputs.file_name }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `📦 ZIP リソースパックファイル「**${fileName}**」が検出されました。\n\n変換処理を開始します...お待ちください。`
            });

      - name: Convert resource pack
        id: convert
        if: steps.download.outputs.download_success == 'true'
        shell: cmd
        run: |
          @echo off
          
          :: 入力ファイルのパスと出力パスを設定
          set "filePath=${{ steps.download.outputs.file_path }}"
          set "outputPath=${{ runner.temp }}/converted_${{ steps.download.outputs.file_name }}"
          
          cd ${{ github.workspace }}
          
          :: McEncryptorのパスを設定
          set "mcEncPath=${{ github.workspace }}\MCEnc\McEncryptor.exe"
          
          echo Files in MCEnc directory:
          dir /b "MCEnc"
          
          echo Executing McEncryptor: %mcEncPath%
          
          echo Current working directory:
          cd
          
          echo Attempting command execution...
          
          :: 入力ファイルの存在確認
          if exist "%filePath%" (
            echo Input file exists: %filePath%
          ) else (
            echo Error: Input file %filePath% not found
            exit /b 1
          )
          
          :: ZIPファイルを一時ディレクトリに解凍
          set "extractDir=%TEMP%\mcencryptor_extract_%RANDOM%"
          echo Extracting ZIP file to: %extractDir%
          mkdir "%extractDir%" 2>nul
          
          :: 解凍処理を実行
          powershell -command "Expand-Archive -Path '%filePath%' -DestinationPath '%extractDir%' -Force"
          if %ERRORLEVEL% neq 0 (
            echo Error extracting ZIP file
            exit /b 1
          )
          
          echo ZIP file extracted successfully
          dir /s /b "%extractDir%"
          
          :: McEncryptorに解凍されたディレクトリのパスを渡す
          set "tempInputFile=%TEMP%\mcencryptor_input.txt"
          echo %extractDir%> "%tempInputFile%"
          echo Sending path to McEncryptor: %extractDir%
          type "%tempInputFile%" | "%mcEncPath%"
          
          echo McEncryptor execution completed. Files should be encrypted now.
          
          :: ディレクトリの内容を確認（暗号化後）
          echo Checking directory contents after encryption:
          dir /s /b "%extractDir%"

          :: 元のファイル名に基づいて出力ファイル名を生成
          for %%F in ("%filePath%") do set "fileNameBase=%%~nF"
          set "outputZip=%TEMP%\%fileNameBase%_converted.zip"
          echo Creating ZIP from encrypted directory: %outputZip%
          
          :: 暗号化されたディレクトリを手動でZIP化
          powershell -command "Compress-Archive -Path '%extractDir%\*' -DestinationPath '%outputZip%' -Force"
          if %ERRORLEVEL% neq 0 (
            echo Error creating ZIP from encrypted files
            exit /b 1
          )
          
          echo Successfully created ZIP file from encrypted directory: %outputZip%
          
          :: 出力ファイルの存在を確認
          if exist "%outputZip%" (
            echo Moving ZIP file to output path
            move "%outputZip%" "%outputPath%"
            echo converted_file_path=%outputPath%>> %GITHUB_OUTPUT%
            echo converted_file_name=%fileNameBase%_converted.zip>> %GITHUB_OUTPUT%
            echo conversion_success=true>> %GITHUB_OUTPUT%
          ) else (
            echo Failed to create output ZIP file
            echo conversion_success=false>> %GITHUB_OUTPUT%
            echo ::error::Failed to create output ZIP file
            exit /b 1
          )

      - name: Notify conversion error
        if: failure() && steps.convert.conclusion == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ **変換エラー**: リソースパックの変換に失敗しました。\n\nファイルが破損しているか、対応していない形式の可能性があります。`
            });

      - name: Upload converted file
        if: steps.convert.outputs.conversion_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: converted-resource-pack
          path: ${{ steps.convert.outputs.converted_file_path }}
          retention-days: 7

      - name: Create download link
        id: download_link
        if: steps.convert.outputs.conversion_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const downloadUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            core.setOutput('url', downloadUrl);
            return { url: downloadUrl };

      - name: Complete and close issue
        if: steps.convert.outputs.conversion_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const downloadUrl = '${{ steps.download_link.outputs.url }}';
            const fileName = '${{ steps.convert.outputs.converted_file_name }}';
            const originalFileName = '${{ steps.download.outputs.file_name }}';
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['converted']
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ **リソースパックの変換が完了しました！**\n\n📄 元のファイル: **${originalFileName}**\n📦 変換されたファイル: **${fileName}**\n\n[📥 ダウンロードリンク](${downloadUrl})\n\n*このファイルは7日間保存されます*\n\n✨ このIssueを自動的にクローズします。`
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });

      - name: Handle general failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🚫 **一般エラー**: 予期しないエラーが発生しました。\n\n詳細: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
